/** 
 * \class PartMaker 
 * \brief Factory for AbstractPart objects.
 */

/**
 * \fn PartMaker::makePart()
 * \brief The factory method.
 */
		
/**
 * \fn PartMaker::makeAction(QObject *parent)
 * \brief The action to be used for making new parts.
 *
 * The caller takes care of connecting the action. If the parent argument is zero, it
 * also receives ownership of the action.
 * Implementations should only set things like name and icon.
 */

/**
 * \class FilterMaker
 * \brief Factory for filters.
 *
 * A FilterMaker introduces one or more filters to the kernel.
 */

/**
 * \class FileFormat
 * \brief Factory for import/export filters.
 */

/**
 * \class ActionManagerOwner
 * \brief A module (typically a PartMaker) that has an ActionManager.
 */

/**
 * \fn ActionManagerOwner::actionManager()
 * \brief Return the action manager of the module
 */

/**
 * \fn ActionManagerOwner::initActionManager()
 * \brief Method that contains initialization that has to be done after loading the plugin
 */

/** 
 * \class ConfigPageMaker
 * \brief A module with application-wide settings.
 */

/** 
 * \class XmlElementAspectMaker
 * \brief Factory that creates an aspect out of an XML element.
 */

/**
 * \fn XmlElementAspectMaker::canCreate(const QString & element_name)
 * \brief Determine whether the loader can handle the given element.
 */

/**
 * \fn XmlElementAspectMaker::createAspectFromXml(XmlStreamReader * reader)
 * \brief The factory method.
 */

/**
 * \class NeedsStaticInit
 * \brief A Module that needs to be initialized at application startup.
 */

/**
 * \class VersionedPlugin
 * \brief Interface for plugins to identify which version and which application they are for.
 */
 
/**
 * \fn VersionedPlugin::pluginTargetAppVersion()
 * \brief Return the version number of the application the plugin was compiled for.
 */

/**
 * \fn VersionedPlugin::pluginTargetAppName()
 * \brief Return the application name of the application the plugin was compiled for.
*/

